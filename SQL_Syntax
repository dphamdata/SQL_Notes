## SQL STATEMENTS ## 

SELECT & FROM

SELECT column1, column2 
FROM table_name;

--------------------------------------------------------------------------------------------------------------------------------------------------

DISTINCT

SELECT DISTINCT col_name 
FROM table_name;

--------------------------------------------------------------------------------------------------------------------------------------------------

WHERE

SELECT column1, column2 
FROM table_name 
WHERE condition

# FILTERING WITH "WHERE" BY DATE 

SELECT column
FROM table_name
WHERE date_column between 'MM/DD/YY AND 'MM/DD/YY'

--------------------------------------------------------------------------------------------------------------------------------------------------

AND

SELECT column1, column2, ... 
FROM table_name 
WHERE condition1 AND condition2 
AND condition3 ...;

--------------------------------------------------------------------------------------------------------------------------------------------------

OR

SELECT column1, column2, ... 
FROM table_name WHERE condition1 OR condition2 
OR condition3 ...;

--------------------------------------------------------------------------------------------------------------------------------------------------

NOT

SELECT column1, column2, ... 
FROM table_name WHERE NOT condition;

--------------------------------------------------------------------------------------------------------------------------------------------------

ORDERY BY

SELECT column1, column2, ... 
FROM table_name ORDER BY column1, column2, ... ASC|DESC;

--------------------------------------------------------------------------------------------------------------------------------------------------

TESTING FOR NULL VALUES

SELECT column_names 
FROM table_name 
column_name IS NULL;

SELECT column_names 
FROM table_name 
WHERE column_name IS NOT NULL;

--------------------------------------------------------------------------------------------------------------------------------------------------

LIMIT

SELECT column_name(s) 
FROM table_name 
WHERE condition 
LIMIT number;

--------------------------------------------------------------------------------------------------------------------------------------------------

MIN & MAX

SELECT MIN(column_name) 
FROM table_name 
WHERE condition;

SELECT MAX(column_name) 
FROM table_name 
WHERE condition;

--------------------------------------------------------------------------------------------------------------------------------------------------

AGGREGATIONS

COUNT = returns the number of rows that matches a specified criterion

SELECT COUNT(column_name) 
FROM table_name 
WHERE condition;

--------------------------------------------------------------------------------------------------------------------------------------------------

AVERAGE 
SELECT AVG(column_name) 
FROM table_name 
WHERE condition;

--------------------------------------------------------------------------------------------------------------------------------------------------

SUM

SELECT SUM(column_name) 
FROM table_name 
WHERE condition;

--------------------------------------------------------------------------------------------------------------------------------------------------

LIKE

SELECT column1, column2, 
FROM table_name 
WHERE columnn LIKE pattern;

LIKE 'a%' = Finds any value starting with 'a' 
LIKE '%a' = Finds any value ending with 'a'

--------------------------------------------------------------------------------------------------------------------------------------------------

IN (Allows you to specift multiple values in a WHERE clause)

SELECT column_name(s) FROM table_name 
WHERE column_name IN (value1, value2, ...);

OR

SELECT column_name(s) 
FROM table_name 
WHERE column_name IN (SELECT STATEMENT);

--------------------------------------------------------------------------------------------------------------------------------------------------

BETWEEN

SELECT column_name(s) 
FROM table_name WHERE column_name 
BETWEEN value1 AND value2;

--------------------------------------------------------------------------------------------------------------------------------------------------

ALIASES (Give a temporary name)

Alias Column Syntax:

SELECT column_name AS alias_name 
FROM table_name;

Alias Table Syntax:

SELECT column_name(s) 
FROM table_name AS alias_name;

--------------------------------------------------------------------------------------------------------------------------------------------------

JOINS-INNER (Selects records that have matching values in both tables).

SELECT column_name(s)
FROM table1 INNER JOIN table2 
ON table1.column_name = table2.column_name;

--------------------------------------------------------------------------------------------------------------------------------------------------

JOINS-LEFT (Returns all records from the left table (table1), and the matching records from the right table (table2). 
The result is 0 records from the right side, if there is no match).

//same for right

SELECT column_name(s) 
FROM table1 LEFT JOIN table2 
ON table1.column_name = table2.column_name;

--------------------------------------------------------------------------------------------------------------------------------------------------

JOINS-FULL (Returns all records when there is a match in left (table1) or right (table2) table records).

SELECT column_name(s) 
FROM table1 FULL OUTER JOIN table2 
ON table1.column_name = table2.column_name 
WHERE condition;

--------------------------------------------------------------------------------------------------------------------------------------------------

GROUP BY (Groups rows that have the same values into summary rows, like "find the number of customers in each country").

SELECT column_name(s) 
FROM table_name 
WHERE condition 
GROUP BY column_name(s) 
ORDER BY column_name(s);

--------------------------------------------------------------------------------------------------------------------------------------------------

HAVING (The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions).

SELECT column_name(s) 
FROM table_name WHERE condition 
GROUP BY column_name(s) 
HAVING condition 
ORDER BY column_name(s);

--------------------------------------------------------------------------------------------------------------------------------------------------
COALESCE (Returns alternative expression IF NULL)

SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0)) 
FROM Products;

--------------------------------------------------------------------------------------------------------------------------------------------------

STORED PROCEDURE (Prepared SQL code that you can save, so the code can be reused over and over again).

CREATE PROCEDURE procedure_name AS sql_statement GO;

--------------------------------------------------------------------------------------------------------------------------------------------------

PRIMARY KEY

CREATE TABLE Persons ( ID int NOT NULL, LastName varchar(255) NOT NULL, FirstName varchar(255), Age int, PRIMARY KEY (ID) );

--------------------------------------------------------------------------------------------------------------------------------------------------

CREATE INDEX (Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, 
they are just used to speed up searches/queries).

CREATE INDEX index_name ON table_name (column1, column2, ...);

--------------------------------------------------------------------------------------------------------------------------------------------------

CREATE VIEW

In SQL, a view is a virtual table based on the result-set of an SQL statement.

A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.

CREATE VIEW view_name AS SELECT column1, column2
FROM table_name WHERE condition;

--------------------------------------------------------------------------------------------------------------------------------------------------

COMMON TABLE EXPRESSIONS 

# CTEs = temporary table that you create at the top of your SQL query. 
# It doesn't get saved anywhere and is only created as a reference for the SQL that immediately follows it.


